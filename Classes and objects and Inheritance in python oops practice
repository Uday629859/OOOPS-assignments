#class and instance methods

#excerise:1  The oldest dog 

class Dog:
    species = 'mammal'

    def __init__(self, name, age):
        self.name = name
        self.age = age
    #instance method    
    def get_biggest_number(*args):
        return max(*args)
        
#class methods
def get_biggest_number(*args):
    return max(*args)

philo = Dog("Philo", 5)
mikey = Dog("Mikey", 6)
william = Dog("William", 7)

print(f'The oldest dog is {get_biggest_number(philo.age, mikey.age, william.age)} years old')

print("{0} is {1} and {2} is {3}.".format(
    philo.name, philo.age, mikey.name, mikey.age))

if philo.species == "mammal":
    print("{0} is a {1}!".format(philo.name, philo.species))


#inheritance

class Dog:
    species = 'mammal'

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def description(self):
        return "{} is {} years old".format(self.name, self.age)

    def speak(self, sound):
        return "{} says {}".format(self.name, sound)


class RussellTerrier(Dog):
    def run(self, speed):
        return "{} runs {}".format(self.name, speed)


class Bulldog(RussellTerrier):
    pass
    #def run(self, speed):
        #return "{} runs {}".format(self.name, speed)


jim = RussellTerrier("Jim", 12)
print(jim.description())

print(jim.run("slowly"))


#inheritance

class Dog:

    species = 'mammal'

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def description(self):
        return "{} is {} years old".format(self.name, self.age)

    def speak(self, sound):
        return "{} says {}".format(self.name, sound)


class RussellTerrier(Dog):
    def run(self, speed):
        return "{} runs {}".format(self.name, speed)


class Bulldog(Dog):
    def run(self, speed):
        return "{} runs {}".format(self.name, speed)

#x = Dog('snoopy', 10)
jim = Bulldog("Jim", 12)
print(jim.description())

print(jim.run("slowly"))

print(isinstance(jim,Dog))

julie = Dog("Julie", 100)
print(isinstance(julie, Dog))

johnnywalker = RussellTerrier("Johnny Walker", 4)
print(isinstance(johnnywalker, Bulldog))

print(isinstance(julie, jim)) #it gives type error because 2nd argument should be a type or tuple of types but not an object.



#overriding the functionality of parent class

class Dog:
    species = 'mammal'

class SomeBreed(Dog):
    pass

class SomeOtherBreed(Dog):
    species = 'reptile'

frank = SomeBreed()
print(SomeBreed.species)

beans = SomeOtherBreed()
print(SomeOtherBreed.species)


# Excercise:2 Dog Inheritance

'''
class Pets:
    species = 'mammal'
    
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
pet_1 = Pets("Tom", 6)
pet_2 = Pets("Fletcher", 7)
pet_3 = Pets("Larry", 9)

print(f'I have 3 dogs.')
print(f'{pet_1.name} is {pet_1.age}.')
print(f'{pet_2.name} is {pet_2.age}.')
print(f'{pet_3.name} is {pet_3.age}.')

print(f"And they're all {Pets.species}s, of course.")
'''
# Using Composition

class Pets:
    
    dogs = []
    
    def __init__(self, dogs):
        self.dogs = dogs
        #print(self.dogs)
        
    def walk(self):
        for dog in self.dogs:
            print(dog.description())
            print(dog.walk())

class Dog:
    species = 'mammal'

    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.is_hungry = True
    
    def description(self):
        return self.name, self.age

    def speak(self, sound):
        return "%s says %s" % (self.name, sound)

    def eat(self):
        self.is_hungry = False
        
    def walk(self):
        return f'{self.name} is walking!'
        #return "%s is walking" % (self.name)


class RussellTerrier(Dog):
    def run(self, speed):
        return "%s runs %s" % (self.name, speed)


class Bulldog(Dog):
    def run(self, speed):
        return "%s runs %s" % (self.name, speed)

my_dogs = [
    Bulldog("Roger", 6), 
    RussellTerrier("Fletcher", 7), 
    Dog("Larry", 9)
]


#x = [Dog("Tom", 5)]
my_pets = Pets(my_dogs)
#my_pets = Pets()
#my_pets.dogs = my_dogs
#print(type(my_pets.dogs))

print("I have {} dogs.".format(len(my_pets.dogs)))

for dog in my_pets.dogs:
    #dog.eat()
    print("{} is {}.".format(dog.name, dog.age))

print("And they're all {}s, of course.".format(dog.species))

my_pets.walk()

are_my_dogs_hungry = False
for dog in my_pets.dogs:
    if dog.is_hungry:
        are_my_dogs_hungry = True

if are_my_dogs_hungry:
    print("My dogs are hungry.")
else:
    print("My dogs are not hungry.")
